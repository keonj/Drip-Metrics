{"ast":null,"code":"var _jsxFileName = \"C:\\\\Western\\\\Ivey\\\\WEC\\\\Drip-Metrics\\\\Drip-Metrics\\\\client\\\\src\\\\components\\\\sensor-images.js\";\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SensorImages() {\n  // const imgUpload = \"http://mydrip.ca/wec2022/\" + getImgURL(); //data call to get image url\n  async function getImgURL() {\n    console.log(\"test\");\n\n    const {\n      MongoClient\n    } = require(\"mongodb\");\n\n    const url = \"mongodb+srv://admin:drip2021@cluster0.lrjsm.mongodb.net/DripDatabase?retryWrites=true&w=majority\";\n    const client = new MongoClient(url); // const dbName = \"DripDatabase\"\n\n    try {\n      await client.connect();\n      console.log(\"Connected correctly to server\");\n      const db = client.db(dbName); // Use collection historical\n\n      const col = db.collection(\"historical\");\n      const myDoc = await col.findOne();\n      console.log(myDoc);\n    } catch (err) {\n      console.log(err.stack);\n    } finally {\n      await client.close();\n    }\n  } // async function fetchData() {\n  //     const img = params.img.toString();\n  //     const response = await fetch(`http://localhost:5000/record/${params.img.toString()}`);\n  //     if (!response.ok) {\n  //       const message = `An error has occured: ${response.statusText}`;\n  //       window.alert(message);\n  //       return;\n  //     }\n  // }\n  // This following section will display the form that takes the input from the user.\n  // Put HTML here\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getImgURL\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Sensor Images something\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 6\n  }, this);\n}\n_c = SensorImages;\n\nvar _c;\n\n$RefreshReg$(_c, \"SensorImages\");","map":{"version":3,"sources":["C:/Western/Ivey/WEC/Drip-Metrics/Drip-Metrics/client/src/components/sensor-images.js"],"names":["React","useState","SensorImages","getImgURL","console","log","MongoClient","require","url","client","connect","db","dbName","col","collection","myDoc","findOne","err","stack","close"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAIA,eAAe,SAASC,YAAT,GAAwB;AAGnC;AAEA,iBAAeC,SAAf,GAA0B;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAkBC,OAAO,CAAC,SAAD,CAA/B;;AAEA,UAAMC,GAAG,GAAG,kGAAZ;AACA,UAAMC,MAAM,GAAG,IAAIH,WAAJ,CAAgBE,GAAhB,CAAf,CALsB,CAOtB;;AAEA,QAAI;AACA,YAAMC,MAAM,CAACC,OAAP,EAAN;AACAN,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACA,YAAMM,EAAE,GAAGF,MAAM,CAACE,EAAP,CAAUC,MAAV,CAAX,CAHA,CAIA;;AACA,YAAMC,GAAG,GAAGF,EAAE,CAACG,UAAH,CAAc,YAAd,CAAZ;AACA,YAAMC,KAAK,GAAG,MAAMF,GAAG,CAACG,OAAJ,EAApB;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAYU,KAAZ;AACH,KARD,CASA,OAAOE,GAAP,EAAY;AACRb,MAAAA,OAAO,CAACC,GAAR,CAAYY,GAAG,CAACC,KAAhB;AACH,KAXD,SAYQ;AACJ,YAAMT,MAAM,CAACU,KAAP,EAAN;AACH;AACJ,GA7BkC,CAgC/B;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEP;AACA;;;AACA,sBACI;AAAA,4BACI;AAAQ,MAAA,OAAO,EAAEhB;AAAjB;AAAA;AAAA;AAAA;AAAA,YADJ,eAED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFC;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWA;KAxDuBD,Y","sourcesContent":["import React, { useState } from \"react\";\r\n\r\n\r\n \r\nexport default function SensorImages() {\r\n \r\n\r\n    // const imgUpload = \"http://mydrip.ca/wec2022/\" + getImgURL(); //data call to get image url\r\n\r\n    async function getImgURL(){\r\n        console.log(\"test\");\r\n        const { MongoClient } = require(\"mongodb\");\r\n    \r\n        const url = \"mongodb+srv://admin:drip2021@cluster0.lrjsm.mongodb.net/DripDatabase?retryWrites=true&w=majority\";\r\n        const client = new MongoClient(url);\r\n    \r\n        // const dbName = \"DripDatabase\"\r\n    \r\n        try {\r\n            await client.connect();\r\n            console.log(\"Connected correctly to server\")\r\n            const db = client.db(dbName);\r\n            // Use collection historical\r\n            const col = db.collection(\"historical\");\r\n            const myDoc = await col.findOne();\r\n            console.log(myDoc);\r\n        }\r\n        catch (err) {\r\n            console.log(err.stack);\r\n        }\r\n        finally {\r\n            await client.close();\r\n        }\r\n    }\r\n\r\n  \r\n        // async function fetchData() {\r\n        //     const img = params.img.toString();\r\n        //     const response = await fetch(`http://localhost:5000/record/${params.img.toString()}`);\r\n        \r\n        //     if (!response.ok) {\r\n        //       const message = `An error has occured: ${response.statusText}`;\r\n        //       window.alert(message);\r\n        //       return;\r\n        //     }\r\n        // }\r\n\r\n // This following section will display the form that takes the input from the user.\r\n // Put HTML here\r\n return ( \r\n     <div>\r\n         <button onClick={getImgURL}></button>\r\n    <p>Sensor Images something</p>\r\n     {/* <img src=\"http://mydrip.ca/wec2022/uploads/2022.01.09_17:19:13_esp32-cam.jpg\"></img>\r\n\r\n     <img src={{imgUpload}}></img> */}\r\n\r\n     </div>\r\n\r\n );\r\n}"]},"metadata":{},"sourceType":"module"}