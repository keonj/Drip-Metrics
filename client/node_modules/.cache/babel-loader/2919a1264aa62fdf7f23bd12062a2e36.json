{"ast":null,"code":"var _jsxFileName = \"C:\\\\Western\\\\Ivey\\\\WEC\\\\Drip-Metrics\\\\Drip-Metrics\\\\client\\\\src\\\\components\\\\sensor-images.js\";\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SensorImages() {\n  // const imgUpload = \"http://mydrip.ca/wec2022/\" + getImgURL(); //data call to get image url\n  async function getImgURL() {\n    const {\n      MongoClient\n    } = require(\"mongodb\");\n\n    const url = \"mongodb+srv://admin:drip2021@cluster0.lrjsm.mongodb.net/DripDatabase?retryWrites=true&w=majority\";\n    const client = new MongoClient(url);\n    const dbName = \"DripDatabase\";\n    await client.connect();\n    console.log(\"Connected correctly to server\");\n    const db = client.db(dbName); // Use collection historical\n\n    const col = db.collection(\"historial\");\n    const myDoc = await col.findOne();\n    console.log(myDoc);\n  } // async function fetchData() {\n  //     const img = params.img.toString();\n  //     const response = await fetch(`http://localhost:5000/record/${params.img.toString()}`);\n  //     if (!response.ok) {\n  //       const message = `An error has occured: ${response.statusText}`;\n  //       window.alert(message);\n  //       return;\n  //     }\n  // }\n  // This following section will display the form that takes the input from the user.\n  // Put HTML here\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Sensor Images something\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 6\n  }, this);\n}\n_c = SensorImages;\n\nvar _c;\n\n$RefreshReg$(_c, \"SensorImages\");","map":{"version":3,"sources":["C:/Western/Ivey/WEC/Drip-Metrics/Drip-Metrics/client/src/components/sensor-images.js"],"names":["React","useState","SensorImages","getImgURL","MongoClient","require","url","client","dbName","connect","console","log","db","col","collection","myDoc","findOne"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAGA,eAAe,SAASC,YAAT,GAAwB;AAGnC;AAEA,iBAAeC,SAAf,GAA0B;AACtB,UAAM;AAAEC,MAAAA;AAAF,QAAkBC,OAAO,CAAC,SAAD,CAA/B;;AAEA,UAAMC,GAAG,GAAG,kGAAZ;AACA,UAAMC,MAAM,GAAG,IAAIH,WAAJ,CAAgBE,GAAhB,CAAf;AAEA,UAAME,MAAM,GAAG,cAAf;AAEA,UAAMD,MAAM,CAACE,OAAP,EAAN;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACA,UAAMC,EAAE,GAAGL,MAAM,CAACK,EAAP,CAAUJ,MAAV,CAAX,CAVsB,CAWtB;;AACA,UAAMK,GAAG,GAAGD,EAAE,CAACE,UAAH,CAAc,WAAd,CAAZ;AACA,UAAMC,KAAK,GAAG,MAAMF,GAAG,CAACG,OAAJ,EAApB;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAYI,KAAZ;AACH,GApBkC,CAuB/B;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEP;AACA;;;AACA,sBACI;AAAA,2BACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADC;AAAA;AAAA;AAAA;AAAA,UADJ;AAUA;KA9CuBb,Y","sourcesContent":["import React, { useState } from \"react\";\r\n\r\n \r\nexport default function SensorImages() {\r\n \r\n\r\n    // const imgUpload = \"http://mydrip.ca/wec2022/\" + getImgURL(); //data call to get image url\r\n\r\n    async function getImgURL(){\r\n        const { MongoClient } = require(\"mongodb\");\r\n\r\n        const url = \"mongodb+srv://admin:drip2021@cluster0.lrjsm.mongodb.net/DripDatabase?retryWrites=true&w=majority\";\r\n        const client = new MongoClient(url);\r\n\r\n        const dbName = \"DripDatabase\"\r\n\r\n        await client.connect();\r\n        console.log(\"Connected correctly to server\")\r\n        const db = client.db(dbName);\r\n        // Use collection historical\r\n        const col = db.collection(\"historial\");\r\n        const myDoc = await col.findOne();\r\n        console.log(myDoc);\r\n    }\r\n\r\n  \r\n        // async function fetchData() {\r\n        //     const img = params.img.toString();\r\n        //     const response = await fetch(`http://localhost:5000/record/${params.img.toString()}`);\r\n        \r\n        //     if (!response.ok) {\r\n        //       const message = `An error has occured: ${response.statusText}`;\r\n        //       window.alert(message);\r\n        //       return;\r\n        //     }\r\n        // }\r\n\r\n // This following section will display the form that takes the input from the user.\r\n // Put HTML here\r\n return ( \r\n     <div>\r\n    <p>Sensor Images something</p>\r\n     {/* <img src=\"http://mydrip.ca/wec2022/uploads/2022.01.09_17:19:13_esp32-cam.jpg\"></img>\r\n\r\n     <img src={{imgUpload}}></img> */}\r\n\r\n     </div>\r\n\r\n );\r\n}"]},"metadata":{},"sourceType":"module"}