{"ast":null,"code":"\"use strict\";\n/*\r\n * The MIT License (MIT)\r\n *\r\n * Copyright (c) 2019 Looker Data Sciences, Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar client_1 = require(\"./client\");\n/**\r\n * Provides methods to define the properties of a [[ChattyClient]]\r\n */\n\n\nvar ChattyClientBuilder =\n/** @class */\nfunction () {\n  function ChattyClientBuilder() {\n    this._targetOrigin = '*';\n    this._handlers = {};\n    this._defaultTimeout = 30000;\n  }\n\n  Object.defineProperty(ChattyClientBuilder.prototype, \"targetOrigin\", {\n    get: function () {\n      return this._targetOrigin;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ChattyClientBuilder.prototype, \"handlers\", {\n    get: function () {\n      return this._handlers;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ChattyClientBuilder.prototype, \"defaultTimeout\", {\n    get: function () {\n      return this._defaultTimeout;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Removes an event handler to the client.\r\n   *\r\n   * @param name Event name\r\n   * @param fn Callback function to remove\r\n   * @returns the client builder\r\n   */\n\n  ChattyClientBuilder.prototype.off = function (name, fn) {\n    if (this._handlers[name]) {\n      this._handlers[name] = this._handlers[name].filter(function (handler) {\n        return handler !== fn;\n      });\n    }\n  };\n  /**\r\n   * Adds an event handler to the client.\r\n   *\r\n   * @param name Event name to which to listen.\r\n   * @param fn Callback function that is invoked when the event\r\n   * is received, and accepts any parameters that were passed with the event.\r\n   * If the event received is sent using [[ChattyHostConnection.sendAndReceive]], its return value is\r\n   * included in the array that will be passed to the resolved promise.\r\n   * @returns the client builder\r\n   */\n\n\n  ChattyClientBuilder.prototype.on = function (name, fn) {\n    this._handlers[name] = this._handlers[name] || [];\n\n    this._handlers[name].push(fn);\n\n    return this;\n  };\n  /**\r\n   * Sets the default period of time a [[ChattyClientConnection.sendAndReceive]] message will wait.\r\n   * Use a negative number to wait indefinitely.\r\n   * The default is 30000ms\r\n   *\r\n   * @param timeout in milliseconds\r\n   * @returns the client builder\r\n   */\n\n\n  ChattyClientBuilder.prototype.withDefaultTimeout = function (timeout) {\n    this._defaultTimeout = timeout;\n    return this;\n  };\n  /**\r\n   * Optional. Sets the target origin parameter used to communicate with the host. Default\r\n   * is '*'. If possible it should be set the the host window's origin.\r\n   *\r\n   * @param targetOrigin targetOrigin to use with postMessage()\r\n   * @returns the client builder\r\n   */\n\n\n  ChattyClientBuilder.prototype.withTargetOrigin = function (targetOrigin) {\n    this._targetOrigin = targetOrigin;\n    return this;\n  };\n  /**\r\n   * Builds a [[ChattyClient]] with the provided properties.\r\n   * @returns a new Chatty client.\r\n   */\n\n\n  ChattyClientBuilder.prototype.build = function () {\n    return new client_1.ChattyClient(this);\n  };\n\n  return ChattyClientBuilder;\n}();\n\nexports.ChattyClientBuilder = ChattyClientBuilder;","map":{"version":3,"sources":["C:/Western/Ivey/WEC/Drip-Metrics/Drip-Metrics/client/node_modules/@looker/chatty/lib/client_builder.js"],"names":["Object","defineProperty","exports","value","client_1","require","ChattyClientBuilder","_targetOrigin","_handlers","_defaultTimeout","prototype","get","enumerable","configurable","off","name","fn","filter","handler","on","push","withDefaultTimeout","timeout","withTargetOrigin","targetOrigin","build","ChattyClient"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAtB;AACA;AACA;AACA;;;AACA,IAAIC,mBAAmB;AAAG;AAAe,YAAY;AACjD,WAASA,mBAAT,GAA+B;AAC3B,SAAKC,aAAL,GAAqB,GAArB;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,eAAL,GAAuB,KAAvB;AACH;;AACDT,EAAAA,MAAM,CAACC,cAAP,CAAsBK,mBAAmB,CAACI,SAA1C,EAAqD,cAArD,EAAqE;AACjEC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKJ,aAAZ;AACH,KAHgE;AAIjEK,IAAAA,UAAU,EAAE,IAJqD;AAKjEC,IAAAA,YAAY,EAAE;AALmD,GAArE;AAOAb,EAAAA,MAAM,CAACC,cAAP,CAAsBK,mBAAmB,CAACI,SAA1C,EAAqD,UAArD,EAAiE;AAC7DC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKH,SAAZ;AACH,KAH4D;AAI7DI,IAAAA,UAAU,EAAE,IAJiD;AAK7DC,IAAAA,YAAY,EAAE;AAL+C,GAAjE;AAOAb,EAAAA,MAAM,CAACC,cAAP,CAAsBK,mBAAmB,CAACI,SAA1C,EAAqD,gBAArD,EAAuE;AACnEC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKF,eAAZ;AACH,KAHkE;AAInEG,IAAAA,UAAU,EAAE,IAJuD;AAKnEC,IAAAA,YAAY,EAAE;AALqD,GAAvE;AAOA;AACJ;AACA;AACA;AACA;AACA;AACA;;AACIP,EAAAA,mBAAmB,CAACI,SAApB,CAA8BI,GAA9B,GAAoC,UAAUC,IAAV,EAAgBC,EAAhB,EAAoB;AACpD,QAAI,KAAKR,SAAL,CAAeO,IAAf,CAAJ,EAA0B;AACtB,WAAKP,SAAL,CAAeO,IAAf,IAAuB,KAAKP,SAAL,CAAeO,IAAf,EAAqBE,MAArB,CAA4B,UAAUC,OAAV,EAAmB;AAAE,eAAOA,OAAO,KAAKF,EAAnB;AAAwB,OAAzE,CAAvB;AACH;AACJ,GAJD;AAKA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIV,EAAAA,mBAAmB,CAACI,SAApB,CAA8BS,EAA9B,GAAmC,UAAUJ,IAAV,EAAgBC,EAAhB,EAAoB;AACnD,SAAKR,SAAL,CAAeO,IAAf,IAAuB,KAAKP,SAAL,CAAeO,IAAf,KAAwB,EAA/C;;AACA,SAAKP,SAAL,CAAeO,IAAf,EAAqBK,IAArB,CAA0BJ,EAA1B;;AACA,WAAO,IAAP;AACH,GAJD;AAKA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIV,EAAAA,mBAAmB,CAACI,SAApB,CAA8BW,kBAA9B,GAAmD,UAAUC,OAAV,EAAmB;AAClE,SAAKb,eAAL,GAAuBa,OAAvB;AACA,WAAO,IAAP;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIhB,EAAAA,mBAAmB,CAACI,SAApB,CAA8Ba,gBAA9B,GAAiD,UAAUC,YAAV,EAAwB;AACrE,SAAKjB,aAAL,GAAqBiB,YAArB;AACA,WAAO,IAAP;AACH,GAHD;AAIA;AACJ;AACA;AACA;;;AACIlB,EAAAA,mBAAmB,CAACI,SAApB,CAA8Be,KAA9B,GAAsC,YAAY;AAC9C,WAAO,IAAIrB,QAAQ,CAACsB,YAAb,CAA0B,IAA1B,CAAP;AACH,GAFD;;AAGA,SAAOpB,mBAAP;AACH,CArFwC,EAAzC;;AAsFAJ,OAAO,CAACI,mBAAR,GAA8BA,mBAA9B","sourcesContent":["\"use strict\";\r\n/*\r\n * The MIT License (MIT)\r\n *\r\n * Copyright (c) 2019 Looker Data Sciences, Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar client_1 = require(\"./client\");\r\n/**\r\n * Provides methods to define the properties of a [[ChattyClient]]\r\n */\r\nvar ChattyClientBuilder = /** @class */ (function () {\r\n    function ChattyClientBuilder() {\r\n        this._targetOrigin = '*';\r\n        this._handlers = {};\r\n        this._defaultTimeout = 30000;\r\n    }\r\n    Object.defineProperty(ChattyClientBuilder.prototype, \"targetOrigin\", {\r\n        get: function () {\r\n            return this._targetOrigin;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ChattyClientBuilder.prototype, \"handlers\", {\r\n        get: function () {\r\n            return this._handlers;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ChattyClientBuilder.prototype, \"defaultTimeout\", {\r\n        get: function () {\r\n            return this._defaultTimeout;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Removes an event handler to the client.\r\n     *\r\n     * @param name Event name\r\n     * @param fn Callback function to remove\r\n     * @returns the client builder\r\n     */\r\n    ChattyClientBuilder.prototype.off = function (name, fn) {\r\n        if (this._handlers[name]) {\r\n            this._handlers[name] = this._handlers[name].filter(function (handler) { return handler !== fn; });\r\n        }\r\n    };\r\n    /**\r\n     * Adds an event handler to the client.\r\n     *\r\n     * @param name Event name to which to listen.\r\n     * @param fn Callback function that is invoked when the event\r\n     * is received, and accepts any parameters that were passed with the event.\r\n     * If the event received is sent using [[ChattyHostConnection.sendAndReceive]], its return value is\r\n     * included in the array that will be passed to the resolved promise.\r\n     * @returns the client builder\r\n     */\r\n    ChattyClientBuilder.prototype.on = function (name, fn) {\r\n        this._handlers[name] = this._handlers[name] || [];\r\n        this._handlers[name].push(fn);\r\n        return this;\r\n    };\r\n    /**\r\n     * Sets the default period of time a [[ChattyClientConnection.sendAndReceive]] message will wait.\r\n     * Use a negative number to wait indefinitely.\r\n     * The default is 30000ms\r\n     *\r\n     * @param timeout in milliseconds\r\n     * @returns the client builder\r\n     */\r\n    ChattyClientBuilder.prototype.withDefaultTimeout = function (timeout) {\r\n        this._defaultTimeout = timeout;\r\n        return this;\r\n    };\r\n    /**\r\n     * Optional. Sets the target origin parameter used to communicate with the host. Default\r\n     * is '*'. If possible it should be set the the host window's origin.\r\n     *\r\n     * @param targetOrigin targetOrigin to use with postMessage()\r\n     * @returns the client builder\r\n     */\r\n    ChattyClientBuilder.prototype.withTargetOrigin = function (targetOrigin) {\r\n        this._targetOrigin = targetOrigin;\r\n        return this;\r\n    };\r\n    /**\r\n     * Builds a [[ChattyClient]] with the provided properties.\r\n     * @returns a new Chatty client.\r\n     */\r\n    ChattyClientBuilder.prototype.build = function () {\r\n        return new client_1.ChattyClient(this);\r\n    };\r\n    return ChattyClientBuilder;\r\n}());\r\nexports.ChattyClientBuilder = ChattyClientBuilder;\r\n"]},"metadata":{},"sourceType":"script"}